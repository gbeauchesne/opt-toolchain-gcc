#!/usr/bin/make -f

DPKG_EXPORT_BUILDFLAGS = 1
ifneq (,$(wildcard /usr/share/dpkg/buildflags.mk))
include /usr/share/dpkg/buildflags.mk
endif

dist_release := $(shell lsb_release -rs 2>/dev/null)

DEB_EXTRA_CONFIGURE_FLAGS += --disable-libssp
DEB_EXTRA_CONFIGURE_FLAGS += --enable-linker-build-id
DEB_EXTRA_CONFIGURE_FLAGS += --enable-gnu-unique-object
ifeq ($(shell dpkg --compare-versions $(dist_release) '>=' 9 && echo yes),yes)
DEB_EXTRA_CONFIGURE_FLAGS += --enable-default-pie
endif

# Plain characters (comma, space)
c_comma := ,
c_empty :=
c_space := $(c_empty) $(c_empty)

# GCC version and corresponding branch
GCC_MIN_VERSION := 5
GCC_VERSION := $(shell $(MAKE)|sed -n '/^gcc.*: \([0-9][0-9.]*\)/s//\1/p')
GCC_MAJOR_VERSION := $(word 1,$(subst ., ,$(GCC_VERSION)))
GCC_MINOR_VERSION := $(word 2,$(subst ., ,$(GCC_VERSION)))
GCC_BRANCH := $(GCC_MAJOR_VERSION)

# GCC installation directory
GCC_PREFIX = /opt/toolchain/gcc-$(GCC_BRANCH)

# Recent enough compilers are required (C++11 support)
ifneq ($(shell dpkg --compare-versions \
  $(shell $(CXX) -dumpversion) '>=' $(GCC_MIN_VERSION) && echo yes), yes)
export CC = /opt/toolchain/gcc-6/bin/gcc
export CXX = /opt/toolchain/gcc-6/bin/g++
endif

# Package name, that includes the GCC branch and UNIX timestamp
PACKAGE_BASENAME = opt-toolchain-gcc
PACKAGE_NAME = $(PACKAGE_BASENAME)-$(GCC_BRANCH)
PACKAGE_VERSION = $(GCC_VERSION)~$(PACKAGE_TIMESTAMP)
PACKAGE_TIMESTAMP = $(shell $(MAKE)|sed -n '/^$(PACKAGE_BASENAME).*: [0-9][0-9.]*~\([0-9][0-9]*\)/s//\1/p')

# Date of the day for auto-generated debian/changelog file
TODAY := $(shell LC_ALL=C date +'%a, %d %b %Y %X %z')

# List of dependant libraries
gcc_lib_depends := \
	$(shell sed -n '/^Package: \(lib.*[0-9]\)-.*/s//\1-$(GCC_BRANCH)/p' \
	  debian/control.in)

# Debian files that need to be generated
GENERATED_FILES = \
	$(gcc_lib_depends:%=debian/%.install) \
	debian/$(PACKAGE_NAME).install \
	debian/lintian-overrides \
	debian/changelog \
	debian/control

# sed patterns for Debian files that need to be generated
GENERATED_FILES_SED_PATTERNS = \
	-e 's/@GCC_BRANCH@/$(GCC_BRANCH)/g' \
	-e 's/@GCC_MAJOR_VERSION@/$(GCC_MAJOR_VERSION)/g' \
	-e 's/@GCC_MINOR_VERSION@/$(GCC_MINOR_VERSION)/g' \
	-e 's/@GCC_VERSION@/$(GCC_VERSION)/g' \
	-e 's/@GCC_MIN_VERSION@/$(GCC_MIN_VERSION)/g' \
	-e 's/@GCC_LIB_DEPENDS@/$(gcc_lib_depends:%=% (= $${binary:Version}),)/g' \
	-e 's/@PACKAGE_BASENAME@/$(PACKAGE_BASENAME)/g' \
	-e 's/@PACKAGE_NAME@/$(PACKAGE_NAME)/g' \
	-e 's/@PACKAGE_VERSION@/$(PACKAGE_VERSION)/g' \
	-e 's/@TODAY@/$(TODAY)/g'

%:
	dh $@ --parallel

debian/%: debian/%.in debian/rules
	sed $(GENERATED_FILES_SED_PATTERNS) $< >$@
debian/$(PACKAGE_NAME).%: debian/$(PACKAGE_BASENAME).%.in debian/rules
	sed $(GENERATED_FILES_SED_PATTERNS) $< >$@
debian/lib%-$(GCC_MAJOR_VERSION).install: debian/lib%.install.in debian/rules
	sed $(GENERATED_FILES_SED_PATTERNS) $< >$@

override_dh_auto_configure: $(GENERATED_FILES)
	make configure \
	  EXTRA_CONFIGURE_FLAGS='$(DEB_EXTRA_CONFIGURE_FLAGS)'

override_dh_auto_build:
	make build.only

override_dh_auto_test:
ifeq (,$(filter nocheck,$(DEB_BUILD_OPTIONS)))
	make check.only || :
endif

override_dh_auto_install:
	make install.only \
	  DESTDIR=$(CURDIR)/debian/tmp

override_dh_strip:
	export PATH="$(CURDIR)/debian/tmp$(GCC_PREFIX)/bin:$$PATH" ; \
	dh_strip
